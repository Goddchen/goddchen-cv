// Mocks generated by Mockito 5.4.4 from annotations
// in goddchen_cv/test/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:fpdart/fpdart.dart' as _i5;
import 'package:goddchen_cv/cv/cv_controller.dart' as _i2;
import 'package:goddchen_cv/cv/cv_data_service.dart' as _i6;
import 'package:goddchen_cv/cv/cv_model.dart' as _i3;
import 'package:goddchen_cv/github_prs/github_prs_data_service.dart' as _i8;
import 'package:goddchen_cv/hobbies/hobbies_controller.dart' as _i12;
import 'package:goddchen_cv/hobbies/hobbies_data_service.dart' as _i9;
import 'package:goddchen_cv/hobbies/hobbies_model.dart' as _i13;
import 'package:goddchen_cv/portfolio/portfolio_data_service.dart' as _i10;
import 'package:goddchen_cv/services/data/data_service.dart' as _i4;
import 'package:goddchen_cv/services/navigation/navigation_service.dart'
    as _i14;
import 'package:goddchen_cv/youtube_videos/youtube_videos_controller.dart'
    as _i15;
import 'package:goddchen_cv/youtube_videos/youtube_videos_data_service.dart'
    as _i11;
import 'package:goddchen_cv/youtube_videos/youtube_videos_model.dart' as _i16;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [CvController].
///
/// See the documentation for Mockito's code generation for more information.
class MockCvController extends _i1.Mock implements _i2.CvController {
  MockCvController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void openItem({required _i3.CvModelItem? item}) => super.noSuchMethod(
        Invocation.method(
          #openItem,
          [],
          {#item: item},
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [DataServiceAggregator].
///
/// See the documentation for Mockito's code generation for more information.
class MockDataServiceAggregator extends _i1.Mock
    implements _i4.DataServiceAggregator {
  MockDataServiceAggregator() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.TaskEither<Object, List<_i6.CvDataServiceItem>> get cvItemsTask =>
      (super.noSuchMethod(
        Invocation.getter(#cvItemsTask),
        returnValue:
            _i7.dummyValue<_i5.TaskEither<Object, List<_i6.CvDataServiceItem>>>(
          this,
          Invocation.getter(#cvItemsTask),
        ),
      ) as _i5.TaskEither<Object, List<_i6.CvDataServiceItem>>);

  @override
  _i5.TaskEither<Object, List<_i8.GithubPrsDataServicePr>> get prsTask =>
      (super.noSuchMethod(
        Invocation.getter(#prsTask),
        returnValue: _i7.dummyValue<
            _i5.TaskEither<Object, List<_i8.GithubPrsDataServicePr>>>(
          this,
          Invocation.getter(#prsTask),
        ),
      ) as _i5.TaskEither<Object, List<_i8.GithubPrsDataServicePr>>);

  @override
  _i5.TaskEither<Object, List<_i9.HobbiesDataServiceHobby>> get hobbiesTask =>
      (super.noSuchMethod(
        Invocation.getter(#hobbiesTask),
        returnValue: _i7.dummyValue<
            _i5.TaskEither<Object, List<_i9.HobbiesDataServiceHobby>>>(
          this,
          Invocation.getter(#hobbiesTask),
        ),
      ) as _i5.TaskEither<Object, List<_i9.HobbiesDataServiceHobby>>);

  @override
  _i5.TaskEither<Object, List<_i10.PortfolioDataServiceProject>>
      get projectsTask => (super.noSuchMethod(
            Invocation.getter(#projectsTask),
            returnValue: _i7.dummyValue<
                _i5.TaskEither<Object, List<_i10.PortfolioDataServiceProject>>>(
              this,
              Invocation.getter(#projectsTask),
            ),
          ) as _i5.TaskEither<Object, List<_i10.PortfolioDataServiceProject>>);

  @override
  _i5.TaskEither<Object, List<_i11.YoutubeVideosDataServiceVideo>>
      get videosTask => (super.noSuchMethod(
            Invocation.getter(#videosTask),
            returnValue: _i7.dummyValue<
                _i5
                .TaskEither<Object, List<_i11.YoutubeVideosDataServiceVideo>>>(
              this,
              Invocation.getter(#videosTask),
            ),
          ) as _i5
              .TaskEither<Object, List<_i11.YoutubeVideosDataServiceVideo>>);
}

/// A class which mocks [HobbiesController].
///
/// See the documentation for Mockito's code generation for more information.
class MockHobbiesController extends _i1.Mock implements _i12.HobbiesController {
  MockHobbiesController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void openItem({required _i13.HobbiesModelHobby? item}) => super.noSuchMethod(
        Invocation.method(
          #openItem,
          [],
          {#item: item},
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [NavigationServiceAggregator].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigationServiceAggregator extends _i1.Mock
    implements _i14.NavigationServiceAggregator {
  MockNavigationServiceAggregator() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void push({required Uri? route}) => super.noSuchMethod(
        Invocation.method(
          #push,
          [],
          {#route: route},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void openLink({required Uri? link}) => super.noSuchMethod(
        Invocation.method(
          #openLink,
          [],
          {#link: link},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void pop() => super.noSuchMethod(
        Invocation.method(
          #pop,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool canPop() => (super.noSuchMethod(
        Invocation.method(
          #canPop,
          [],
        ),
        returnValue: false,
      ) as bool);
}

/// A class which mocks [YoutubeVideosController].
///
/// See the documentation for Mockito's code generation for more information.
class MockYoutubeVideosController extends _i1.Mock
    implements _i15.YoutubeVideosController {
  MockYoutubeVideosController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void openItem({required _i16.YoutubeVideosModelVideo? item}) =>
      super.noSuchMethod(
        Invocation.method(
          #openItem,
          [],
          {#item: item},
        ),
        returnValueForMissingStub: null,
      );
}
